@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>OrgChart</title>
    <script src="https://balkan.app/js/orgchart.js"></script>

    <style>
        html, body {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
            overflow: hidden;
        }

        #tree {
            width: 100%;
            height: 100%;
        }

        .field_0 {
            font-family: Impact;
        }
    </style>
</head>
<body>

    <div id="tree"></div>

    <script>

        let chart = new OrgChart(document.getElementById("tree"), {
            enableDragDrop: true,
            nodeMenu: {
                edit: { text: "Edit" },
                add: { text: "Add" },
                remove: { text: "Remove" }
            },
            nodeBinding: {
                field_0: "fullName"
            }
        });



        chart.onUpdateNode((args) => {
            let newNode = args.newData;
            fetch("@Url.Action("UpdateNode")", {
                method: "POST",
                body: JSON.stringify(newNode),
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then(chart.updateNode(newNode))
            .catch(error => console.error(error));
            return false;
        });

        chart.onAddNode((args) => {
            let node = args.data;
            node.id = 0;
            node.pid = parseInt(node.pid);
            node.fullName = "John Smith";

            fetch("@Url.Action("AddNode")", {
                method: "POST",
                body: JSON.stringify(node),
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then(response => response.json())
            .then(data => {
                node.id = data.id;
                chart.addNode(node);
            })
            .catch(error => console.error(error));

            return false;
        });

        chart.onRemoveNode((args) => {
            let nodeId = args.id

            fetch("@Url.Action("RemoveNode")", {
                method: "POST",
                body: JSON.stringify({ id: nodeId }),
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then(chart.removeNode(nodeId))
            .catch(error => console.error(error));
            return true;
        });

       fetch("@Url.Action("Read")")
        .then(response => response.json())
        .then(data => {
            chart.load(data.nodes);
        })
        .catch(error => console.error(error));
    </script>
</body>
</html>